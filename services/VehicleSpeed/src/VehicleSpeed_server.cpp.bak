#include <iostream>
#include <fstream>
#include <unistd.h>
#include <thread>
#include <CommonAPI/CommonAPI.hpp>
#include "VehicleSpeed_server_stubimpl.hpp"
 
using namespace std;


// global variable
float vehicle_speed = 0.321;


void delay(int delay) {
	std::cout << "[VehicleSpeed] sleep " << delay << "s" << std::endl;
	std::this_thread::sleep_for(std::chrono::seconds(delay));
}

void delay_ms(int delay) {
	// std::cout << "[VehicleSpeed] sleep " << delay << "ms" << std::endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(delay));
}

void update_vehicle_speed() {
	std::ifstream file;

	int count = 0;
    bool log_enable = true;

	file.open("vehicle_speed.txt");

	// 1s
	count++;
	if (count == 50) {
		log_enable = true;
        if (vehicle_speed == 0.123) vehicle_speed = 0.321;
        else                        vehicle_speed = 0.123;
	}
	else {
		log_enable = false;
	}

	// update vehicle_speed from File
	if (file >> vehicle_speed) {
		if (log_enable == true)
			std::cout << "Current speed: " << vehicle_speed << std::endl;
	} else {
		if (log_enable == true)
			std::cout << "Error reading file" << std::endl;
	}
	file.close();
}

 
int main() {
    std::shared_ptr<CommonAPI::Runtime> runtime = CommonAPI::Runtime::get();
    std::shared_ptr<VehicleSpeedStubImpl> myService = std::make_shared<VehicleSpeedStubImpl>();
    runtime->registerService("local", "test", myService);
    std::cout << "Successfully Registered Service!" << std::endl;
    std::cout << "delay: 20ms" << std::endl;


    // start thread !
    std::thread speed_thread(update_vehicle_speed);

    while (true) {
        myService->fireSpeedEvent(vehicle_speed);
        //delay_ms(20);
        usleep(20000); // 20ms

    }
 
    return 0;
} 
